#!/usr/bin/env python3
import argparse
import sys
import struct

__author__ = "Sandor Nemes"


def rotate(value, bits, width=32):
    """
    Rotate a numeric value left or right by the specified number of bits, with respect to the bit width.

    :param value: input number
    :param bits: number of bits to rotate to the left, use negative values for rotating to the right
    :param width: bit width for the rotate operation, defaults to 32
    :return: result of the bit rotate operation
    """
    bits %= width
    mask = (1 << width) - 1
    return ((value << bits) | (value >> (width - bits))) & mask


def decrypt_string(data):
    if len(data) < 8:
        return None

    key = struct.unpack_from('=I', data)[0]
    length = struct.unpack_from('=H', data, 4)[0] ^ key & 0xffff
    if length < 4 or length > len(data) - 6:
        return None

    buffer = bytearray(data[6:6 + length])
    for i in range(length):
        key = i + rotate(key, -3)
        buffer[i] ^= key & 0xff

    if buffer[-1]:
        return None

    if sum(int(_ > 127) for _ in buffer) > 0:
        return None

    if sum(int(_ < 32 and _ not in (0, 10, 13)) for _ in buffer) > len(buffer) // 2:
        return None

    return bytes(buffer)


def main():
    parser = argparse.ArgumentParser(description='Decrypts encrypted strings from IcedID shellcode/samples')
    parser.add_argument('filename', help='sample file name')
    args = parser.parse_args()

    with open(args.filename, 'rb') as f:
        data = f.read()

    address_transform = lambda x: x
    try:
        import pefile
        pe = pefile.PE(data=data, fast_load=True)
        address_transform = lambda x: pe.get_rva_from_offset(x) + pe.OPTIONAL_HEADER.ImageBase
    except Exception as e:
        print('[!] WARNING: {!s}'.format(e), file=sys.stderr)

    decrypted = {}

    print('[+] Scanning file...', end='', file=sys.stderr, flush=True)
    pos = 0
    while pos < len(data):
        s = decrypt_string(data[pos:pos + 1024])
        if s:
            decrypted[pos] = s
            pos += len(s)
        else:
            pos += 1
    print('done!\n[+] Found {} strings.'.format(len(decrypted)), file=sys.stderr, flush=True)

    print('{')
    for pos, s in decrypted.items():
        if s.count(b'\0') >= len(s) // 2:
            s = s.decode('utf-16le')
        else:
            s = s.decode('utf-8')
        va = address_transform(pos)
        print('    {:#010x}: {!r},'.format(va, s))
    print('}')


if __name__ == '__main__':
    main()
